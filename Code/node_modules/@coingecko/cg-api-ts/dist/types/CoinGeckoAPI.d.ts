import { APIResponse } from "./model/API";
import { ServerRequestHeader, ServerResponse } from "./model/Server";
import { ICoinsId, IGlobal, ICoinsIdMarketChart, ICoinIdStatusUpdates, ISimplePrice, IStatusUpdates, ISimpleSupportedVsCurrencies, ICoinsList, IExchangeRates, IExchanges, IExchangesListItem, IExchangesId, IExchangesIdTicker, ICoinTickers, IDerivatives, IDerivativesExchanges, IDerivativesExchangesId, IFinanceProduct, IFinancePlatform, ICoinsLite } from "./model/APIResponse";
import { BeamFilterCategories, BeamFilterProjectType, SortOrder, CoinsMarketsSortOrder, PriceChangePercentage, TickerSortOrder, DerivativesExchangesSortType, DerivativesExchangeTickerType } from "./model/type";
export declare class CoinGeckoAPI {
    baseUrl: string;
    fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
    timeout: number;
    getHeader: ServerRequestHeader;
    postHeader: ServerRequestHeader;
    constructor(fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response>, timeout?: number, baseUrl?: string, getHeader?: ServerRequestHeader, postHeader?: ServerRequestHeader);
    /**
     * Using Fetch to send GET request
     */
    getReq<T>(endpoint: string, header?: ServerRequestHeader): APIResponse<T>;
    /**
     * Using Fetch to send POST request
     */
    postReq<T>(endpoint: string, body: any, header?: ServerRequestHeader): APIResponse<T>;
    /**
     * Using Fetch to send DELETE request
     */
    deleteReq<T>(endpoint: string, header?: ServerRequestHeader): APIResponse<T>;
    /**
     * Using Fetch to send PUT request
     */
    putReq<T>(endpoint: string, body: any, header?: ServerRequestHeader): APIResponse<T>;
    /**
     * Check API server status
     * https://api.coingecko.com/api/v3/ping
     */
    getPing(): ServerResponse<boolean>;
    /**
     * Get the current price of any cryptocurrencies in any other supported currencies that you need.
     * https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd
     */
    getSimplePrice(ids: string[], vsCurrencies: string[]): ServerResponse<ISimplePrice>;
    /**
     * Get list of supported_vs_currencies.
     * https://api.coingecko.com/api/v3/simple/supported_vs_currencies
     */
    getSimpleSupportedVsCurrencies(): ServerResponse<ISimpleSupportedVsCurrencies>;
    /**
     * List all supported coins id, name and symbol (no pagination required)
     * https://api.coingecko.com/api/v3/coins/list
     */
    getCoinsList(): ServerResponse<ICoinsList>;
    getCoinsMarket(vsCurrency: string, order?: CoinsMarketsSortOrder, ids?: string[], perPage?: number, page?: number, sparkline?: boolean, priceChangePercentage?: PriceChangePercentage[]): Promise<{
        response: Response;
        data: {
            id: string;
            symbol: string;
            name: string;
            image: string;
            current_price: number;
            market_cap: number;
            market_cap_rank: number;
            total_volume: number;
            high_24h: number;
            low_24h: number;
            price_change_24h: number;
            price_change_percentage_24h: number;
            market_cap_change_24h: number;
            market_cap_change_percentage_24h: number;
            circulating_supply: number;
            total_supply: number | null;
            ath: number;
            ath_change_percentage: number;
            roi: {
                times: number;
                currency: string;
                percentage: number;
            } | null;
            last_updated: string;
        }[];
        endpoint: string;
    }>;
    /**
     * Get current data (name, price, market, ... including exchange tickers) for a coin
     * https://api.coingecko.com/api/v3/coins/bitcoin
     */
    getCoinsId(coin: string, localization?: boolean, tickers?: boolean, marketData?: boolean, communityData?: boolean, developerData?: boolean, sparkline?: boolean, include_exchange_logo?: boolean): ServerResponse<ICoinsId>;
    getCoinsIdTickers(id: string, includeExchangeLogo?: boolean, page?: number, order?: TickerSortOrder, exchangesIds?: string[]): Promise<{
        response: Response;
        data: ICoinTickers;
        endpoint: string;
    }>;
    /**
     * Get market chart of a certain coin (prices, market cap and volume)
     * https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=2
     */
    getCoinsIdMarketChart(coin: string, vsCurrency: string, days: number | string): ServerResponse<ICoinsIdMarketChart>;
    /**
     * Get status updates for a given coin
     * https://api.coingecko.com/api/v3/coins/dash/status_updates?page=1&per_page=2
     */
    getCoinsIdStatusUpdates(coin: string, page: number, perPage?: number): ServerResponse<ICoinIdStatusUpdates>;
    /**
     * List all the available category list
     * https://api.coingecko.com/api/v3/coins/category_list
     * @param locale
     */
    getCoinsCategoryList(locale?: string): Promise<{
        response: Response;
        data: {
            category_id: string;
            name: string;
        }[];
        endpoint: string;
    }>;
    getCoinsLite(vsCurrency?: string, categoryId?: string, locale?: string, page?: number, perPage?: number, order?: SortOrder): Promise<{
        response: Response;
        data: ICoinsLite[];
        endpoint: string;
    }>;
    /**
     * List all exchanges
     * https://api.coingecko.com/api/v3/exchanges
     */
    getExchanges(page?: number, perPage?: number): Promise<{
        response: Response;
        data: IExchanges[];
        endpoint: string;
    }>;
    /**
     * List all supported markets id and name (no pagination required)
     * https://api.coingecko.com/api/v3/exchanges/list
     */
    getExchangesList(): Promise<{
        response: Response;
        data: IExchangesListItem;
        endpoint: string;
    }>;
    /**
     * Get exchange volume in BTC and tickers
     * https://api.coingecko.com/api/v3/exchanges/binance
     */
    getExchangesId(id: string, tickers?: boolean): Promise<{
        response: Response;
        data: IExchangesId;
        endpoint: string;
    }>;
    getExchangesIdTicker(id: string, coinIds?: string[], exchangeLogo?: boolean, page?: number, order?: TickerSortOrder): Promise<{
        response: Response;
        data: IExchangesIdTicker;
        endpoint: string;
    }>;
    /**
     * Get volume_chart data for a given exchange
     * https://api.coingecko.com/api/v3/exchanges/binance/volume_chart?days=1
     */
    getExchangesIdVolumeChart(id: string, days: number): Promise<{
        response: Response;
        data: [number, number][];
        endpoint: string;
    }>;
    /**
     * List all derivative tickers
     * https://api.coingecko.com/api/v3/derivatives
     */
    getDerivatives(): Promise<{
        response: Response;
        data: IDerivatives[];
        endpoint: string;
    }>;
    /**
     * List all derivative exchanges
     * https://api.coingecko.com/api/v3/derivatives/exchanges
     */
    getDerivativesExchanges(order?: DerivativesExchangesSortType): Promise<{
        response: Response;
        data: IDerivativesExchanges[];
        endpoint: string;
    }>;
    /**
     * Show derivative exchange data
     * https://api.coingecko.com/api/v3/derivatives/exchanges?include_tickers=true
     * @param {string} id Derivative Exchange ID
     * @param {DerivativesExchangeTickerType} includeTickers (use DerivativesExchangeTickerType enum) "all" for all tickers, "unexpired" for unexpired tickers and "" to return no tickers
     */
    getDerivativesExchangesId(id: string, includeTickers?: DerivativesExchangeTickerType): Promise<{
        response: Response;
        data: IDerivativesExchangesId;
        endpoint: string;
    }>;
    /**
     * BEAM
     * List all status_updates with data (description, category, created_at, user, user_title and pin)
     * https://api.coingecko.com/api/v3/status_updates
     */
    getStatusUpdates(page: number, category?: BeamFilterCategories, project?: BeamFilterProjectType, perPage?: number): ServerResponse<IStatusUpdates>;
    getExchangeRates(): ServerResponse<IExchangeRates>;
    /**
     * List all finance platforms
     * https://api.coingecko.com/api/v3/finance_platforms
     */
    getFinancePlatforms(perPage?: number, page?: number): Promise<{
        response: Response;
        data: IFinancePlatform[];
        endpoint: string;
    }>;
    /**
     * List all finance products
     * https://api.coingecko.com/api/v3/finance_products
     */
    getFinanceProducts(perPage?: number, page?: number): Promise<{
        response: Response;
        data: IFinanceProduct[];
        endpoint: string;
    }>;
    /**
     * Get cryptocurrency global data
     * https://api.coingecko.com/api/v3/global
     */
    getGlobal(): ServerResponse<IGlobal>;
}
